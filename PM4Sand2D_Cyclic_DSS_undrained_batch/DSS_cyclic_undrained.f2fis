fish define $input_variables
    $Pa    = 101300.0  ; Atmospheric pressure
    ;----------------------------------------------------------------------------------------------
	; Primary parameters
	; -  Correlations & procedures for estimating Dr and Go provided in the manual
	;$N160   = 14.0
    $Cd     = 46.0                         ; [Idriss & Boulanger, 2003b]
    ;$Dr     = sqrt($N160/$Cd)              ; Relative density in decimal
    $N160   = math.min(46,math.max(2,46*$Dr^2))      ; Calibration to Idriss-Boulanger 2008 

    ;$Go    	= 677		; Field: Calibrate to Vs data
	;____________________________________________________________________________________________________;
    ;   Assigning hpo : this parameter is varied by user until the desired cyclic strength is obtained   ;
    ;____________________________________________________________________________________________________;
    ; Here assigned given that model has been calibrated
    if $Dr  = 0.35 
       $hpo = 0.52
    end_if 
    if $Dr  = 0.55 
       $hpo = 0.40 
    end_if 
    if $Dr  = 0.75 
       $hpo = 0.62 
    end_if
    ;____________________________________________________________________________________________________;
    ;   Sand properties: Secondary parameters (set to 0.0 if you want to retain defaults)
    ;____________________________________________________________________________________________________;
    $ho     =  0.0     ; Defaults to value calculated as a function of Dr
	$emin   =  0.0     ; Defaults to 0.5
	$emax   =  0.0     ; Defaults to 0.8
    $nb     =  0.0     ; Defaults to 0.5
    $nd     =  0.0     ; Defaults to 0.1
    $Ado    =  0.0     ; Defaults to value calculated to honor Bolton's relationship
    $zmax   =  0.0     ; Defaults to value calculated as a function of the rel. state parameter
    $cz     =  0.0     ; Defaults to 250
    $ce     =  0.0     ; Defaults to value calculated as a function of Dr
    $phicv  =  0.0     ; Defaults to 33 degrees
    $pois   =  0.0     ; Defaults to 0.3
    $Gdegr  =  0.0     ; Defaults to 2.0
	$CDR    =  0.0     ; Defaults to value calculated as a function of Dr
	$Ckaf   =  0.0     ; Defaults to value calculated as a function of Dr
	$Q      =  0.0     ; Defaults to 10.0
	$R      =  0.0     ; Defaults to 1.5
	$m      =  0.0     ; Defaults to 0.01
	$Fsed   =  0.0     ; Defaults to 0.04
	$psedo  =  0.0     ; Defaults to -Patm/5
	;
    ;____________________________________________________________________________________________________;
    ;                                     Water Properties                                                 ;
    ;____________________________________________________________________________________________________;
    $waterK     = 2.0e9          ; Water bulk modulus (Pa)
    $waterTens  = -1.0*$Pa       ; Water tension cut-off
    $waterDens  = 1000.0         ; Density of water (kg/m^3) 
	;
    ;----------------------------------------------------------------------------------------------
	; Soil density, void ratio, and porosity (required zone properties)
	; -  Computed from above parameters as follows
	$Gs	     = 2.67	; Specific gravity
	if $emin = 0.0
	   $emin = 0.5
	end_if
	if $emax = 0.0
	   $emax = 0.8
	end_if

	$void  		= $emax - $Dr*($emax - $emin)
    $rho_d      = $Gs * $waterDens /(1.0+$void)  ; Dry density
	; 
    $poros      = $void/(1.0+$void)              ; Porosity
    $rho_s      = $rho_d *(1.0+$void/$Gs)        ; Saturated density
	;
    ;----------------------------------------------------------------------------------------------
	;____________________________________________________________________________________________________;
    ;                Obtaining Go: Go can be estimated from Vs1 and Ko or specified directly             ;
    ;____________________________________________________________________________________________________;
    $Vs1          = 85*($N160+2.5)^0.25                    ; Fit to Andrus-Stokoe (2000) data (m/sec)
    ;$Vs1         = 170.0                                  ; Shear wave velocity (m/sec) - Uncomment this to specify Vs1 directly
    ;$Ko          = 0.5                                    ; Lateral earth pressure coefficient at rest
    $Go = ($rho_s * $Vs1^2 / $Pa) / ((1.0+$Ko)/2.0)^0.5    ; UCD/CGM-12/01 Report Equations 78 & 79 
    
    ;Activate following line if you wish to activate non-default Go value
    ;$Go = 100.0
    
    ; CSR for 3rd element - Herein computed from I&B 2008 (Eqn 70) and set as the CRR
    $CSRmid       = math.exp(($N160/14.1) + ($N160/126)^2 - ($N160/23.6)^3 + ($N160/25.4)^4 - 2.8)  
end
[$input_variables]

;========================================================================================================;
;                                    END OF INPUTS NEEDED BY THE USER                                    ;
;========================================================================================================;
fish def $calc_variables
    
    array $csr(5)  
    $csr(1)     = $CSRmid / 1.6  ; This must be the smallest CSR for algorithm to work properly
    $csr(2)     = $CSRmid / 1.3
    $csr(3)     = $CSRmid
    $csr(4)     = $CSRmid * 1.3
    $csr(5)     = $CSRmid * 1.6
    
    $drained    = 0         ; Switch: 1 for drained, 0 for undrained
    $maxStrain  = 0.04
    $maxCycles  = 100
    $freq       = 1.0                  ; Frequency for Rayleigh damping
    $damp       = 0.005                ; Damping for Rayleigh damping

    $maxStrInc  = 1.0e-5    ; Max strain increment per time step. 1e-6 preferred; 1e-5 quick tests
    $his_step   = int( 50 * (1.0e-5)/$maxStrInc )   ; Default of 10 gives larger files than needed
    
    ;----------------------------------------------------------------------------------------------
    ; Output file base name
    ;----------------------------------------------------------------------------------------------
    $savefile      = $basefile + '.sav' 
    $sigvo         = -$Pa * $confinement                       ; Convert confinement to units of problem
  
    ;$basefile   = "cyclic_DSS_"
end
[$calc_variables]
;----------------------------------------------------------------------------------------------
;   Create initial grid and initialize with 1D vertical loading
;----------------------------------------------------------------------------------------------
zone create2d quadrilateral size 9 1 
zone cmodel assign null range id-list 2 4 6 8
zone cmodel assign pm4sand2d range id-list 1 3 5 7 9 
zone group "soil" range id-list 1 3 5 7 9
zone face skin

;--------------------------------------------------------------------------------------------------
;   Boundary conditions for 1D consolidation to start
;--------------------------------------------------------------------------------------------------
zone face apply velocity 0,0 range position-y 0
zone face apply velocity-x 0 range position-y 1

;--------------------------------------------------------------------------------------------------
;   Assign soil properties
;--------------------------------------------------------------------------------------------------
zone property ...
    density [$rho_s] ...
    D_r     [$Dr] ...
    G_o     [$Go] ...
    h_po    [$hpo] ...
    range group "soil"
;
;   Secondary parameters input here for clarity
;
zone property ...
    h_o     [$ho] ...
    e_min   [$emin] ...
    e_max   [$emax] ...
    n_b     [$nb] ...
    n_d     [$nd] ...
    A_do    [$Ado] ...
    z_max   [$zmax] ...
    c_z     [$cz] ...
    c_e     [$ce] ...
    phi_cv  [$phicv] ...
    pois    [$pois] ...
    G_degr  [$Gdegr] ...
    C_DR    [$CDR] ...
    C_kaf   [$Ckaf] ...
    Q_bolt  [$Q] ...
    R_bolt  [$R] ...
    m_par   [$m] ...
    F_sed   [$Fsed] ...
    p_sedo  [$psedo] ...
    range group "soil"
;
;--------------------------------------------------------------------------------------------------
;   Water properties and porosity
;--------------------------------------------------------------------------------------------------
zone fluid cmodel assign isotropic range group "soil"
zone fluid property porosity [$poros] range group "soil"

zone initialize fluid-density [$waterDens] range group "soil"
zone gridpoint initialize saturation 1.0 range group "soil"
zone gridpoint initialize fluid-modulus 0 range group "soil"                ; Bulk set to zero for initialization 
zone gridpoint initialize fluid-tension [$waterTens] range group "soil"
zone gridpoint initialize pore-pressure 0.0 range group "soil"

;--------------------------------------------------------------------------------------------------
;   Initialize stresses
zone initialize stress xx [$Ko*$sigvo] yy [$sigvo] zz [$Ko*$sigvo] range id-list 1
zone initialize stress xx [$Ko*$sigvo] yy [$sigvo] zz [$Ko*$sigvo] range id-list 3
zone initialize stress xx [$Ko*$sigvo] yy [$sigvo] zz [$Ko*$sigvo] range id-list 5
zone initialize stress xx [$Ko*$sigvo] yy [$sigvo] zz [$Ko*$sigvo] range id-list 7
zone initialize stress xx [$Ko*$sigvo] yy [$sigvo] zz [$Ko*$sigvo] range id-list 9

;--------------------------------------------------------------------------------------------------
;   Zone face apply stress-normal 
zone face apply stress-normal [$sigvo] range group "Top1"
zone face apply stress-normal [$sigvo] range group "Top2"
zone face apply stress-normal [$sigvo] range group "Top3"
zone face apply stress-normal [$sigvo] range group "Top4"
zone face apply stress-normal [$sigvo] range group "Top5"

;--------------------------------------------------------------------------------------------------
;	Solve for equilibrium in static mode and then in dynamic
;   -  Also sets initial back-stresses and other history terms for model
model dynamic active off
model solve
;model save "initial"

model dynamic active on
zone dynamic damping rayleigh [$damp] [$freq]

solve  ; Establishes dt for use in computing the loading rate below
;--------------------------------------------------------------------------------------------------
;   Reset boundary conditions for DSS shearing
;	-  Attaching grippoints requires knowing the gridpoint ID or getting the ID from its coordinates
;	-  Getting the ID requires first getting a pointer given the coordinates, and then the ID given the pointer
zone attach gridpointid [gp.id(gp.near(0.0,1.0))] to-gridpointid [gp.id(gp.near(1.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(2.0,1.0))] to-gridpointid [gp.id(gp.near(3.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(4.0,1.0))] to-gridpointid [gp.id(gp.near(5.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(6.0,1.0))] to-gridpointid [gp.id(gp.near(7.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(8.0,1.0))] to-gridpointid [gp.id(gp.near(9.0,1.0))] 

;--------------------------------------------------------------------------------------------------
;	Impose static shear stress bias 
;   -  All 5 zones should respond identically, so loop tests criteria on 1st zone only
;
[$dt = dynamic.timestep]
[$capVel = $maxStrInc/$dt]
zone face apply velocity-x [$capVel] range position-y 1  
model dynamic time-total 0.0

;program echo off

fish define $apply_static
    $maxSteps = 1/$maxStrInc
    loop $nt (1,$maxSteps)
        $static_SR = zone.stress.effective.xy(zone.near(0.5,0.5))/(-$sigvo)
        $time = dynamic.time + $dt
        if $static_SR > $static_bias
            exit
        else
            command
                model solve time [$time]
            end_command
        end_if
    end_loop
end
[$apply_static]

;program echo on

;--------------------------------------------------------------------------------------------------
;   Reset Kwater prior to further shearing
;--------------------------------------------------------------------------------------------------
fish define $updateKwater
    if $drained = 0
        command
            zone gridpoint initialize fluid-modulus [$waterK] range group "soil"
        end_command
    end_if
end
[$updateKwater]

;--------------------------------------------------------------------------------------------------
;   Resets prior to starting cyclic loading
;   -  Optional to reset the initial back-stress ratios at end of consolidation
;   -  Set displacements to start for zero for stress-strain responses
;--------------------------------------------------------------------------------------------------
zone property First_Call 0 range group "soil"

zone gridpoint initialize displacement 0.0 0.0
;model save "initial_w_bias"

;--------------------------------------------------------------------------------------------------
;   Histories to be recorded
;
history interval [$his_step]
model history name "mRat" mechanical ratio
model history name "dyntime" dynamic time-total

zone history name "x1" displacement-x position 1 1 
zone history name "x2" displacement-x position 3 1
zone history name "x3" displacement-x position 5 1
zone history name "x4" displacement-x position 7 1
zone history name "x5" displacement-x position 9 1

zone history name "pp1" pore-pressure source zone zoneid 1
zone history name "pp2" pore-pressure source zone zoneid 3
zone history name "pp3" pore-pressure source zone zoneid 5
zone history name "pp4" pore-pressure source zone zoneid 7
zone history name "pp5" pore-pressure source zone zoneid 9

zone history name "esxx1" stress-effective quantity xx zoneid 1
zone history name "esxx2" stress-effective quantity xx zoneid 3
zone history name "esxx3" stress-effective quantity xx zoneid 5
zone history name "esxx4" stress-effective quantity xx zoneid 7
zone history name "esxx5" stress-effective quantity xx zoneid 9

zone history name "esyy1" stress-effective quantity yy zoneid 1
zone history name "esyy2" stress-effective quantity yy zoneid 3
zone history name "esyy3" stress-effective quantity yy zoneid 5
zone history name "esyy4" stress-effective quantity yy zoneid 7
zone history name "esyy5" stress-effective quantity yy zoneid 9

zone history name "sxy1" stress-effective quantity xy zoneid 1
zone history name "sxy2" stress-effective quantity xy zoneid 3
zone history name "sxy3" stress-effective quantity xy zoneid 5
zone history name "sxy4" stress-effective quantity xy zoneid 7
zone history name "sxy5" stress-effective quantity xy zoneid 9

zone history name "eps_yy1" strain-increment quantity yy zoneid 1
zone history name "eps_yy2" strain-increment quantity yy zoneid 3
zone history name "eps_yy3" strain-increment quantity yy zoneid 5
zone history name "eps_yy4" strain-increment quantity yy zoneid 7
zone history name "eps_yy5" strain-increment quantity yy zoneid 9

zone history name "ep1" stress-effective quantity mean zoneid 1
zone history name "ep2" stress-effective quantity mean zoneid 3
zone history name "ep3" stress-effective quantity mean zoneid 5
zone history name "ep4" stress-effective quantity mean zoneid 7
zone history name "ep5" stress-effective quantity mean zoneid 9

;--------------------------------------------------------------------------------------------------
;   Define function for controlling cyclic loads and computing fish history variables
;--------------------------------------------------------------------------------------------------
[$dt = dynamic.timestep]
[$capVel = $maxStrInc/$dt]
zone face apply velocity-x [$capVel] range position-y 1  

fish define $arrays
    array $Liq_1(5) $Liq_2(5) $Liq_3(5) $cycNum(5) $eps_xy(5) $eps_xyMax(5) $SR(5) $SRLast(5) $ru(5) $ruMax(5) $sigvRatio(5)
end
[$arrays]

fish define $CSR_calcs
    loop $n (1,5)
        $xMidZone = 0.5+2*($n-1)
        $ru($n) = 1 + zone.stress.effective.yy(zone.near($xMidZone,0.5))/(-$sigvo)
        $ruMax($n) = math.max($ru($n),$ruMax($n))
        $sigvRatio($n) = -zone.stress.effective.yy(zone.near($xMidZone,0.5))/(-$sigvo)
        $eps_xy($n) = gp.disp.x(gp.near(2.0*$n-1,1.0))  ; Engineering strain assuming grid has unit height
        $eps_xyMax($n) = math.max(math.abs($eps_xy($n)),$eps_xyMax($n))
        $SR($n) = zone.stress.effective.xy(zone.near($xMidZone,0.5))/(-$sigvo)
        
        if $SR($n) > $csr($n) + $static_bias
            if $SRLast($n) <= $static_bias
                ; Note for discussion with Itasca: The following commands do not work properly.
                ;   I can set a gp vel, and it holds for the rest of a solve command, but it goes back to zero after the next solve command is executed.
                ;   gp.vel.x(gp.near($xMidZone-0.5,1.0)) = -$capVel
                ;   gp.vel.x(gp.near($xMidZone+0.5,1.0)) = -$capVel
                command
                    zone face apply velocity-x [-$capVel] range position-x [$xMidZone-0.5] [$xMidZone+0.5] position-y 1.0
                end_command
                $cycNum($n) = $cycNum($n)+0.5
                $SRLast($n) = $SR($n)
            end_if
        end_if
        
        if $SR($n) < -$csr($n) + $static_bias
            if $SRLast($n) >= $static_bias
                command
                    zone face apply velocity-x [$capVel] range position-x [$xMidZone-0.5] [$xMidZone+0.5] position-y 1.0
                end_command
                $cycNum($n) = $cycNum($n)+0.5
                $SRLast($n) = $SR($n)
            end_if
        end_if

        if $ruMax($n) < 0.98                       ; ru > 98%
            $Liq_1($n) = $cycNum($n) + 0.5
        end_if
        if $eps_xyMax($n) < 0.01                    ; 1% shear strain
            $Liq_2($n) = $cycNum($n) + 0.5
        end_if
        if $eps_xyMax($n) < 0.03                    ; 3% shear strain
            $Liq_3($n) = $cycNum($n) + 0.5
        end_if
        if $eps_xyMax($n) > $maxStrain
            gp.vel.x(gp.near($xMidZone-0.5,1.0)) = 0.0
            gp.vel.x(gp.near($xMidZone+0.5,1.0)) = 0.0
        end_if
        
    end_loop

    $csr_1 = $SR(1)
    $csr_2 = $SR(2)
    $csr_3 = $SR(3)
    $csr_4 = $SR(4)
    $csr_5 = $SR(5)
    
    $cycN_1 = $cycNum(1)
    $cycN_2 = $cycNum(2)
    $cycN_3 = $cycNum(3)
    $cycN_4 = $cycNum(4)
    $cycN_5 = $cycNum(5)
    
    $ru_1 = $ru(1)
    $ru_2 = $ru(2)
    $ru_3 = $ru(3)
    $ru_4 = $ru(4)
    $ru_5 = $ru(5)
    
    $eps_xy_1 = $eps_xy(1)
    $eps_xy_2 = $eps_xy(2)
    $eps_xy_3 = $eps_xy(3)
    $eps_xy_4 = $eps_xy(4)
    $eps_xy_5 = $eps_xy(5)

    $svRat_1 = $sigvRatio(1)
    $svRat_2 = $sigvRatio(2)
    $svRat_3 = $sigvRatio(3)
    $svRat_4 = $sigvRatio(4)
    $svRat_5 = $sigvRatio(5)

end

fish callback add $CSR_calcs -100 

;--------------------------------------------------------------------------------------------------
;	Additional histories
;--------------------------------------------------------------------------------------------------
fish history name "csr1" $csr_1
fish history name "csr2" $csr_2
fish history name "csr3" $csr_3
fish history name "csr4" $csr_4
fish history name "csr5" $csr_5

fish history name "cycNum1" $cycN_1
fish history name "cycNum2" $cycN_2
fish history name "cycNum3" $cycN_3
fish history name "cycNum4" $cycN_4
fish history name "cycNum5" $cycN_5

fish history name "ru1" $ru_1
fish history name "ru2" $ru_2
fish history name "ru3" $ru_3
fish history name "ru4" $ru_4
fish history name "ru5" $ru_5

fish history name "eps_xy1" $eps_xy_1
fish history name "eps_xy2" $eps_xy_2
fish history name "eps_xy3" $eps_xy_3
fish history name "eps_xy4" $eps_xy_4
fish history name "eps_xy5" $eps_xy_5

fish history name "svRat1" $svRat_1
fish history name "svRat2" $svRat_2
fish history name "svRat3" $svRat_3
fish history name "svRat4" $svRat_4
fish history name "svRat5" $svRat_5

;--------------------------------------------------------------------------------------------------
;   Impose cyclic loading
;   -  Solve for his_steps without loading so the histories include the the initial conditions
;--------------------------------------------------------------------------------------------------
model dynamic time-total 0.0

zone face apply velocity-x 0.0 range position-y 1  
model solve time [$his_step*$dt]

zone face apply velocity-x [$capVel] range position-y 1  

;program echo off

fish define $CSR_loading
    loop $nt (1,10000000)
        if $eps_xyMax(1) < $maxStrain
            if $cycNum(1) < $maxCycles 
                $time = dynamic.time + 10*$his_step*$dt
                command
                    model solve time [$time]
                end_command
            end_if
        end_if
    end_loop
end
[$CSR_loading]

;program echo on

;--------------------------------------------------------------------------------------------------
;   Outputting of time histories for the 5 elements
;   -  Approximate interpolation of a smooth 'cycle number" as a float rather than stepped integer
;--------------------------------------------------------------------------------------------------
fish define $five_files
    loop $n (1,5)
        $tableName1 = "Table1"
        $tableName2 = "Table2"
        $tableName3 = "Table3"
        
        $cycNumName = string.build("cycNum%1",$n)
        $csrName = string.build("csr%1",$n)
        $eps_xyName = string.build("eps_xy%1",$n)
        $esyyName= string.build("esyy%1",$n)
        $ruName  = string.build("ru%1",$n)
        $svRatName = string.build("svRat%1",$n)

        command
            history export [$csrName] vs [$cycNumName] table [$tableName1] 
            history export [$esyyName] vs [$eps_xyName] table [$tableName2] 
            history export [$ruName] vs [$svRatName] table [$tableName3] 
        end_command

        $numRows = table.size($tableName1)
        $ifirst = 1
        $firstN = table.x($tableName1,$ifirst)
        loop $ih (1,$numRows)
            $tempN = table.x($tableName1,$ih) - 0.25
            if $tempN > $firstN | $ih == $numrows
                if $ih == $numrows
                    $tempN = table.x($tableName1,$ih)
                end_if               
                $ilast = $ih
                $lastN = $tempN
                loop $ifix ($ifirst,$ilast)
                    table.x($tableName1,$ifix) = $firstN + ($lastN - $firstN)*($ifix - $ifirst)/ ($ilast - $ifirst)
                end_loop
                $firstN = $lastN
                $ifirst = $ilast
            end_if
        end_loop
 
        local fout    = file.open(string.build("%1_%2.csv",$basefile,$n),"write","text")
        local lineOut = "Ncyc,CSR,Shear_strain_%,Vert_eff_stress_atm,sigv/sigvo,ru"
        local listOut = list
        listOut       = list.append(listOut,lineOut)
 
        loop $ih (1,$numRows)
            lineOut = string.build("%1,%2,%3,%4,%5,%6", table.x($tableName1,$ih),table.y($tableName1,$ih), ...
                100*table.x($tableName2,$ih),-table.y($tableName2,$ih)/$Pa,table.x($tableName3,$ih),table.y($tableName3,$ih))
            listOut = list.append(listOut,lineOut)
        end_loop
        
        file.write(fout,listOut)
        file.close(fout)
        
    end_loop
end
[$five_files]
;--------------------------------------------------------------------------------------------------
;   Output summary file of number of cycles to different failure criteria
;--------------------------------------------------------------------------------------------------
fish define $summary
    local $f = file.open($basefile + "_csrN.csv","write","text")
    local $l = list
    local $a = "CSR,Ncyc_to_98%_ru,Ncyc_to_1%_strain,Ncyc_to_3%_strain"
    $l = list.append($l,$a)
    loop $n (1,5)
        $a = string.build("%1,%2,%3,%4",$csr($n),$Liq_1($n),$Liq_2($n),$Liq_3($n))
        $l = list.append($l,$a)
        
        table("criteria_1",$csr($n)) = $Liq_1($n)
        table("criteria_2",$csr($n)) = $Liq_2($n)
        table("criteria_3",$csr($n)) = $Liq_3($n)

end_loop
    file.write($f,$l)
    file.close($f)
end
[$summary]
;--------------------------------------------------------------------------------------------------

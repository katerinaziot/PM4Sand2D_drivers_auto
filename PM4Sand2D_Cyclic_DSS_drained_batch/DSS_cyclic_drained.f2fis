;--------------------------------------------------------------------------------------------------
;	GENERAL INPUTS
;--------------------------------------------------------------------------------------------------
fish define _input_variables
    _Pa        = 101300.0  ; Atmospheric pressure
    
    ;____________________________________________________________________________________________________;
    ;               Obtaining Dr: Dr can be estimated by an SPT blowcount or specified directly          ;
    ;____________________________________________________________________________________________________;
   ;_N160   = 14.0
    _Cd     = 46.0                         ; [Idriss & Boulanger, 2003b]
   ;_Dr     = sqrt(_N160/_Cd)              ; Relative density in decimal
    _N160   = math.min(46,math.max(2,46*_Dr^2))      ; Calibration to Idriss-Boulanger 2008 
    ;____________________________________________________________________________________________________;
    ;   Assigning hpo : this parameter is varied by user until the desired cyclic strength is obtained   ;
    ;____________________________________________________________________________________________________;
    ; Here assigned given that model has been calibrated
    if _Dr  = 0.35 
       _hpo = 0.52
    endif 
    if _Dr  = 0.55 
       _hpo = 0.40 
    endif 
    if _Dr  = 0.75 
       _hpo = 0.62 
    endif
    ;____________________________________________________________________________________________________;
    ; Sand properties: Secondary parameters (set to 0.0 if you want defaults)
    ;____________________________________________________________________________________________________;
    _ho     =  0.0     ; Defaults to value calculated as a function of Dr
	_emin   =  0.0     ; Defaults to 0.5
	_emax   =  0.0     ; Defaults to 0.8
    _nb     =  0.0     ; Defaults to 0.5
    _nd     =  0.0     ; Defaults to 0.1
    _Ado    =  0.0     ; Defaults to value calculated to honor Bolton's relationship
    _zmax   =  0.0     ; Defaults to value calculated as a function of the rel. state parameter
    _cz     =  0.0     ; Defaults to 250
    _ce     =  0.0     ; Defaults to value calculated as a function of Dr
    _phicv  =  0.0     ; Defaults to 33 degrees
    _pois   =  0.0     ; Defaults to 0.3
    _Gdegr  =  0.0     ; Defaults to 2.0
	_CDR    =  0.0     ; Defaults to value calculated as a function of Dr
	_Ckaf   =  0.0     ; Defaults to value calculated as a function of Dr
	_Q      =  0.0     ; Defaults to 10.0
	_R      =  0.0     ; Defaults to 1.5
	_m      =  0.0     ; Defaults to 0.01
	_Fsed   =  0.0     ; Defaults to 0.04
	_psedo  =  0.0     ; Defaults to -Patm/5
	;
    ;----------------------------------------------------------------------------------------------
	; Water properties	
    _waterK     = 2.0e9                         ; Water bulk modulus (Pa)
    _waterTens  = -1.0*_Pa
    _waterDens  = 1000.0                        ; Density of water (kg/m^3) 
	;
    ;____________________________________________________________________________________________________;
    ;                     Specifying density, void ratio and porosity                                    ;
    ;____________________________________________________________________________________________________;
    _Gs	     = 2.67	        ; Specific gravity
	if _emin = 0.0
	   _emin = 0.5
	endif
	if _emax = 0.0
	   _emax = 0.8
	endif
	_void  		= _emax - _Dr*(_emax - _emin)
    _rho_d      = _Gs * _waterDens /(1.0+_void)  ; Dry density
	; 
    _poros      = _void/(1.0+_void)              ; Porosity
    _rho_s      = _rho_d *(1.0+_void/_Gs)        ; Saturated density
    ;
    ;____________________________________________________________________________________________________;
    ;                Obtaining Go: Go can be estimated from Vs1 and Ko or specified directly             ;
    ;____________________________________________________________________________________________________;
    _Vs1          = 85*(_N160+2.5)^0.25                    ; Fit to Andrus-Stokoe (2000) data (m/sec)
    ;_Vs1         = 170.0                                  ; Shear wave velocity (m/sec) - Uncomment this to specify Vs1 directly
    _Ko           = 0.5                                    ; Lateral earth pressure coefficient at rest
    _Go = (_rho_s * _Vs1^2 / _Pa) / ((1.0+_Ko)/2.0)^0.5    ; UCD/CGM-12/01 Report Equations 78 & 79 
    ; Activate following line if you wish to activate non-default Go value
    ; _Go = 100.0

    ;____________________________________________________________________________________________________;
    ;                                      Driver Parameters                                             ;
    ;____________________________________________________________________________________________________;
    array _sigv(5)      ; define the confining stresses (atm) for the five elements (vertical effective)
    _sigv(1)    = 0.5   ; atmospheres
    _sigv(2)    = 1.0
    _sigv(3)    = 2.0
    _sigv(4)    = 4.0
    _sigv(5)    = 8.0

    
;   -----------------------------------------------------------------------------------------------
    _drained    = 1         ; Switch: 1 for drained, 0 for undrained
    _maxStrInc  = 1.0e-5    ; Max strain increment per time step
end
[_input_variables]

;========================================================================================================;
;                                    END OF INPUTS NEEDED BY THE USER                                    ;
;========================================================================================================;
fish def _calc_variables
    _damp         = 0.005           ; Rayleigh damping
    _freq         = 1.0

    if _strainCount = 1
       _1st_strain = 0.01 
      else 
       _1st_strain = 0.000003 
    endif

    ;----------------------------------- LOADING CONDITIONS -------------------------------------------------; 
    ;   Apply loading condition by imposing a velocity until a specific strain is reached and then sign of   ;
    ; velocity is changed.                                                                                   ;
    ;--------------------------------------------------------------------------------------------------------;
    array _strainLimit(10) 
    _strainLimit(1)   =  _1st_strain
    _strainLimit(2)   =  0.00001 
    _strainLimit(3)   =  0.00003  
    _strainLimit(4)   =  0.0001    
    _strainLimit(5)   =  0.0003 
    _strainLimit(6)   =  0.001 
    _strainLimit(7)   =  0.003 
    _strainLimit(8)   =  0.01 
    _strainLimit(9)   =  0.03 
    _strainLimit(10)  =  0.1 
    ;----------------------------------------------------------------------------------------------
    ; Output file base name
    ;----------------------------------------------------------------------------------------------
    _savefile      = _basefile + '.sav' 
end
[_calc_variables]

;   Create initial grid and initialize with 1D vertical loading
;
zone create2d quadrilateral size 9 1 

fish def _nulling_depending_on_version
    if version.code.major = 900 then
        command
            zone cmodel assign null range id-list 2 4 6 8
        endcommand
    else
        command
            zone null range id-list 2 4 6 8
        endcommand
    endif
end
[_nulling_depending_on_version]

zone cmodel assign pm4sand2d range id-list 1 3 5 7 9 
zone group "soil" range id-list 1 3 5 7 9
zone face skin

;--------------------------------------------------------------------------------------------------
;   Boundary conditions for 1D consolidation to start
;
zone face apply velocity 0,0 range position-y 0
zone face apply velocity-x 0 range position-y 1

;--------------------------------------------------------------------------------------------------
;   Assign soil properties
;
zone property ...
    density [_rho_s] ...
    D_r     [_Dr] ...
    G_o     [_Go] ...
    h_po    [_hpo] ...
    range group "soil"
;
;   Secondary parameters input here for clarity
;
zone property ...
    h_o     [_ho] ...
    e_min   [_emin] ...
    e_max   [_emax] ...
    n_b     [_nb] ...
    n_d     [_nd] ...
    A_do    [_Ado] ...
    z_max   [_zmax] ...
    c_z     [_cz] ...
    c_e     [_ce] ...
    phi_cv  [_phicv] ...
    pois    [_pois] ...
    G_degr  [_Gdegr] ...
    C_DR    [_CDR] ...
    C_kaf   [_Ckaf] ...
    Q_bolt  [_Q] ...
    R_bolt  [_R] ...
    m_par   [_m] ...
    F_sed   [_Fsed] ...
    p_sedo  [_psedo] ...
    range group "soil"
;
;--------------------------------------------------------------------------------------------------
;   Water properties and porosity
;--------------------------------------------------------------------------------------------------

zone fluid cmodel assign isotropic          range group "soil"
zone fluid property porosity [_poros]       range group "soil"
zone initialize fluid-density [_waterDens]  range group "soil"
zone gridpoint initialize saturation 1.0    range group "soil"
zone gridpoint initialize pore-pressure 0.0 range group "soil"

fish def _water_depending_on_version
    if version.code.major = 900
        command
           zone gridpoint initialize fluid-modulus 0            range group "soil"   ; Bulk set to zero for initialization        
           zone gridpoint initialize fluid-tension [_waterTens] range group "soil"
        endcommand
    else
        command
           zone fluid property fluid-modulus 0               range group "soil"     ; Bulk set to zero for initialization 
           zone fluid property effective-cutoff [_waterTens] range group "soil"
        endcommand
    endif
end
[_water_depending_on_version]

;--------------------------------------------------------------------------------------------------
;   Initialize stresses
;
zone initialize stress xx [-_Ko*_sigv(1)*_Pa] yy [-_sigv(1)*_Pa] zz [-_Ko*_sigv(1)*_Pa] range id-list 1
zone initialize stress xx [-_Ko*_sigv(2)*_Pa] yy [-_sigv(2)*_Pa] zz [-_Ko*_sigv(2)*_Pa] range id-list 3
zone initialize stress xx [-_Ko*_sigv(3)*_Pa] yy [-_sigv(3)*_Pa] zz [-_Ko*_sigv(3)*_Pa] range id-list 5
zone initialize stress xx [-_Ko*_sigv(4)*_Pa] yy [-_sigv(4)*_Pa] zz [-_Ko*_sigv(4)*_Pa] range id-list 7
zone initialize stress xx [-_Ko*_sigv(5)*_Pa] yy [-_sigv(5)*_Pa] zz [-_Ko*_sigv(5)*_Pa] range id-list 9

;--------------------------------------------------------------------------------------------------
;   Zone face apply stress-normal 
;
zone face apply stress-normal [-_sigv(1)*_Pa] range group "Top1"
zone face apply stress-normal [-_sigv(2)*_Pa] range group "Top2"
zone face apply stress-normal [-_sigv(3)*_Pa] range group "Top3"
zone face apply stress-normal [-_sigv(4)*_Pa] range group "Top4"
zone face apply stress-normal [-_sigv(5)*_Pa] range group "Top5"

;--------------------------------------------------------------------------------------------------
;	Solve for equilibrium
;
model dynamic active off
model solve
;--------------------------------------------------------------------------------------------------
;   Histories to be recorded
;--------------------------------------------------------------------------------------------------
model history name "mRat" mechanical ratio
model history name "dyntime" dynamic time-total

zone history name "x1" displacement-x position 1 1 
zone history name "x2" displacement-x position 3 1
zone history name "x3" displacement-x position 5 1
zone history name "x4" displacement-x position 7 1
zone history name "x5" displacement-x position 9 1

zone history name "pp1" pore-pressure source zone zoneid 1
zone history name "pp2" pore-pressure source zone zoneid 3
zone history name "pp3" pore-pressure source zone zoneid 5
zone history name "pp4" pore-pressure source zone zoneid 7
zone history name "pp5" pore-pressure source zone zoneid 9

zone history name "esxx1" stress-effective quantity xx zoneid 1
zone history name "esxx2" stress-effective quantity xx zoneid 3
zone history name "esxx3" stress-effective quantity xx zoneid 5
zone history name "esxx4" stress-effective quantity xx zoneid 7
zone history name "esxx5" stress-effective quantity xx zoneid 9

zone history name "esyy1" stress-effective quantity yy zoneid 1
zone history name "esyy2" stress-effective quantity yy zoneid 3
zone history name "esyy3" stress-effective quantity yy zoneid 5
zone history name "esyy4" stress-effective quantity yy zoneid 7
zone history name "esyy5" stress-effective quantity yy zoneid 9

zone history name "sxy1" stress-effective quantity xy zoneid 1
zone history name "sxy2" stress-effective quantity xy zoneid 3
zone history name "sxy3" stress-effective quantity xy zoneid 5
zone history name "sxy4" stress-effective quantity xy zoneid 7
zone history name "sxy5" stress-effective quantity xy zoneid 9

zone history name "ep1" stress quantity mean zoneid 1
zone history name "ep2" stress quantity mean zoneid 3
zone history name "ep3" stress quantity mean zoneid 5
zone history name "ep4" stress quantity mean zoneid 7
zone history name "ep5" stress quantity mean zoneid 9

zone history name "eps_yy1" strain-increment quantity yy zoneid 1
zone history name "eps_yy2" strain-increment quantity yy zoneid 3
zone history name "eps_yy3" strain-increment quantity yy zoneid 5
zone history name "eps_yy4" strain-increment quantity yy zoneid 7
zone history name "eps_yy5" strain-increment quantity yy zoneid 9

;--------------------------------------------------------------------------------------------------
;   Reset Kwater prior to undrained shearing
;--------------------------------------------------------------------------------------------------
fish define _updateKwater
    if _drained = 0 and version.code.major = 900 then
        command
            zone gridpoint initialize fluid-modulus [_waterK] range group "soil"
        end_command
    else if _drained = 0
        command
            zone fluid property fluid-modulus [_waterK] range group "soil"
        endcommand
    end_if
end
[_updateKwater]

;--------------------------------------------------------------------------------------------------
;   Reset boundary conditions for DSS shearing
;	-  Attaching grippoints requires knowing the gridpoint ID or getting the ID from its coordinates
;	-  Getting the ID requires first getting a pointer given the coordinates, and then the ID given the pointer
;--------------------------------------------------------------------------------------------------
zone attach gridpointid [gp.id(gp.near(0.0,1.0))] to-gridpointid [gp.id(gp.near(1.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(2.0,1.0))] to-gridpointid [gp.id(gp.near(3.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(4.0,1.0))] to-gridpointid [gp.id(gp.near(5.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(6.0,1.0))] to-gridpointid [gp.id(gp.near(7.0,1.0))] 
zone attach gridpointid [gp.id(gp.near(8.0,1.0))] to-gridpointid [gp.id(gp.near(9.0,1.0))] 

;--------------------------------------------------------------------------------------------------
;   Solve for equilibrium in static mode and then in dynamic mode
;--------------------------------------------------------------------------------------------------
model solve

model dynamic active on
model dynamic time-total 0.0
zone  dynamic damping rayleigh [_damp] [_freq]

model solve  ; Need to ensure we get the dt established because the dynamic mode was just turned on

zone gridpoint initialize displacement 0.0 0.0

;--------------------------------------------------------------------------------------------------
;   Fish variables to compute during cyclic loading
;--------------------------------------------------------------------------------------------------
fish define _arrays
    array _strainAmp(100) _Gsec(100,5) _G_Gmax(100,5) _dampRatio(100,5)
    array _eps_xy(5) _eps_xyLast(5) _SR(5) _sigvRatio(5) _work(5) _tauPos(5) _tauNeg(5) _tauLast(5) _tauNow(5)
end
[_arrays]

fish define _fish_calcs
    loop _n (1,5)
        _xMidZone = 0.5+2*(_n-1)
        _eps_xy(_n) = gp.disp.x(gp.near(2.0*_n-1,1.0))  ; Engineering strain assuming grid has unit height
        _tauNow(_n) = zone.stress.effective.xy(zone.near(_xMidZone,0.5))
        _SR(_n) = _tauNow(_n) / (_sigv(_n)*_Pa)
        _sigvRatio(_n) = -zone.stress.effective.yy(zone.near(_xMidZone,0.5))/(_sigv(_n)*_Pa)
        _work(_n) = _work(_n) + 0.5*(_tauNow(_n)+_tauLast(_n))*(_eps_xy(_n)-_eps_xyLast(_n))
        _tauLast(_n) = _tauNow(_n)
        _eps_xyLast(_n) = _eps_xy(_n)
    end_loop
    
    _eps_xy_1 = _eps_xy(1)
    _eps_xy_2 = _eps_xy(2)
    _eps_xy_3 = _eps_xy(3)
    _eps_xy_4 = _eps_xy(4)
    _eps_xy_5 = _eps_xy(5)

    _sr_1 = _SR(1)
    _sr_2 = _SR(2)
    _sr_3 = _SR(3)
    _sr_4 = _SR(4)
    _sr_5 = _SR(5)
    
    _svRat_1 = _sigvRatio(1)
    _svRat_2 = _sigvRatio(2)
    _svRat_3 = _sigvRatio(3)
    _svRat_4 = _sigvRatio(4)
    _svRat_5 = _sigvRatio(5)
end
fish callback add _fish_calcs -100 

;--------------------------------------------------------------------------------------------------
;	Additional histories
;--------------------------------------------------------------------------------------------------
fish history name "eps_xy1" _eps_xy_1
fish history name "eps_xy2" _eps_xy_2
fish history name "eps_xy3" _eps_xy_3
fish history name "eps_xy4" _eps_xy_4
fish history name "eps_xy5" _eps_xy_5

fish history name "sr1" _sr_1
fish history name "sr2" _sr_2
fish history name "sr3" _sr_3
fish history name "sr4" _sr_4
fish history name "sr5" _sr_5

fish history name "svRat1" _svRat_1
fish history name "svRat2" _svRat_2
fish history name "svRat3" _svRat_3
fish history name "svRat4" _svRat_4
fish history name "svRat5" _svRat_5

;--------------------------------------------------------------------------------------------------
;   Apply loading
;
fish define _strain_control
    _time = dynamic.time.total
    local _iOut = 0
    loop _iStrain (1,_strainCount)
        _strainInc = math.min(_maxStrInc,_strainLimit(_iStrain)/50.0)
        _capVel    = _strainInc / dynamic.timestep
        _extraTime = _strainLimit(_iStrain)/_capVel
        loop _iCyc (1,_nCycles)
            _time  = _time + _extraTime
            command
                zone face apply velocity-x [_capVel] range position-y 1
                model solve time-total [_time]
            end_command
            
            loop _n (1,5)
                _tauPos(_n) = zone.stress.effective.xy(zone.near(0.5+2*(_n-1),0.5))
            end_loop
            
            _time = _time + 2*_extraTime
            command
                zone face apply velocity-x [-_capVel] range position-y 1
                model solve time-total [_time]
            end_command
            _time = _time + _extraTime
            
            loop _n (1,5)
                _tauNeg(_n) = zone.stress.effective.xy(zone.near(0.5+2*(_n-1),0.5))
            end_loop
            
            command
                zone face apply velocity-x [_capVel] range position-y 1
                model solve time-total [_time]
            end_command
            
            _iOut = _iOut + 1
            _strainAmp(_iOut) = _strainLimit(_iStrain) * 100
            loop _n (1,5)
                _Gsec(_iOut,_n)   = ((_tauPos(_n)-_tauNeg(_n))/(2*_strainLimit(_iStrain)))/1000.0
                _G_Gmax(_iOut,_n) = _Gsec(_iOut,_n) / _Gsec(1,_n)
                _WorkStored       = 0.25*(_tauPos(_n)-_tauNeg(_n))*_strainLimit(_iStrain)
                _dampRatio(_iOut,_n) = 100*_work(_n)/(4*3.14159*_WorkStored)
                _work(_n) = 0.0
            end_loop
        end_loop
    end_loop
end
[_strain_control]

;========================================================================================================;
;                             OUTPUT DATA from TABLES                                                    ;
;--------------------------------------------------------------------------------------------------------;
; This function will export 5 .csv files in the folder of the project that will contain information for  ;
; each one of the 5 elements in 5 columns: shear strain (%), vertical(volumetric) strain(%), shear stress;
;                                          tau/sigvc, sigv,  sigv/sigvc                                  ;
;========================================================================================================;
fish define _five_files
    loop _n (1,5)
        _tableName1 = "Table1"
        _tableName2 = "Table2"
        _tableName3 = "Table3"
        
        _eps_xyName = string.build("eps_xy%1",_n)
        _eps_yyName = string.build("eps_yy%1",_n)
        _sxyName   = string.build("sxy%1",_n)
        _srName    = string.build("sr%1",_n)
        _esyyName  = string.build("esyy%1",_n)
        _svRatName = string.build("svRat%1",_n)
         
        command
            history export [_eps_yyName] vs [_eps_xyName] table [_tableName1] 
            history export [_srName] vs [_sxyName] table [_tableName2] 
            history export [_svRatName] vs [_esyyName] table [_tableName3] 
        end_command

        local _fout = file.open(string.build("%1_%2.csv",_basefile,_n),"write","text")
        local _lineOut = "eps_xy(%),eps_yy(%),tauxy(kPa),tauxy/sigvc,sigv(kPa),sigv/sigvc"
        local _listOut = list
        _listOut       = list.append(_listOut,_lineOut)
 
        _numRows = table.size(_tableName1)
        loop _ih (1,_numRows)
            _lineOut = string.build("%1,%2,%3,%4,%5,%6", 100*table.x(_tableName1,_ih),-100*table.y(_tableName1,_ih), ...
                table.x(_tableName2,_ih)/1000.0,table.y(_tableName2,_ih),-table.x(_tableName3,_ih)/1000.0,table.y(_tableName3,_ih))
            _listOut = list.append(_listOut,_lineOut)
        end_loop
        
        file.write(_fout,_listOut)
        file.close(_fout)
    end_loop
end
[_five_files]

;--------------------------------------------------------------------------------------------------------;
;   This function will export one .csv file that will contain summary information                        ;
;--------------------------------------------------------------------------------------------------------;
fish define _summary
    local _f = file.open(_basefile + "_MRD.csv","write","text")
    local _l = list
    local _a = "eps_xy(%),G1(kPa),G/Gmax1,D1(%),G2(kPa),G/Gmax2,D2(%),G3(kPa),G/Gmax3,D3(%),G4(kPa),G/Gmax4,D4(%),G5(kPa),G/Gmax5,D5(%)"
    _l       = list.append(_l,_a)
    local _nRows = _Ncycles * _strainCount
    loop _i (1,_nRows)
        ; RWB - string.build cannot take 10 or more numbers because %10 will give you %1 instead etc.
        _a1 = string.build("%1,%2,%3,%4,%5,%6,%7,%8,%9,BOB", ... 
             _strainAmp(_i), _Gsec(_i,1), _G_Gmax(_i,1), _dampRatio(_i,1), _Gsec(_i,2), _G_Gmax(_i,2), _dampRatio(_i,2), _Gsec(_i,3), _G_Gmax(_i,3))
        _a2 = string.build("%1,%2,%3,%4,%5,%6,%7", ... 
             _dampRatio(_i,3), _Gsec(_i,4), _G_Gmax(_i,4), _dampRatio(_i,4), _Gsec(_i,5), _G_Gmax(_i,5), _dampRatio(_i,5))
        _a = string.replace(_a1,"BOB",_a2)
        _l = list.append(_l,_a)
        
        table("G/Gmax_1",_strainAmp(_i)) = _G_Gmax(_i,1)
        table("G/Gmax_2",_strainAmp(_i)) = _G_Gmax(_i,2)
        table("G/Gmax_3",_strainAmp(_i)) = _G_Gmax(_i,3)
        table("G/Gmax_4",_strainAmp(_i)) = _G_Gmax(_i,4)
        table("G/Gmax_5",_strainAmp(_i)) = _G_Gmax(_i,5)

        table("damp_1",_strainAmp(_i)) = _dampRatio(_i,1)
        table("damp_2",_strainAmp(_i)) = _dampRatio(_i,2)
        table("damp_3",_strainAmp(_i)) = _dampRatio(_i,3)
        table("damp_4",_strainAmp(_i)) = _dampRatio(_i,4)
        table("damp_5",_strainAmp(_i)) = _dampRatio(_i,5)

    end_loop
    file.write(_f,_l)
    file.close(_f)
end
[_summary]
;========================================================================================================;
